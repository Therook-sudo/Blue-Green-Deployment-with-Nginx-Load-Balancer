events {
    worker_connections 1024;
}

http {
    # Custom log format with pool, release, and upstream details
    log_format detailed_upstream 
        '{'
        '"time":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request_method":"$request_method",'
        '"request_uri":"$request_uri",'
        '"status":$status,'
        '"body_bytes_sent":$body_bytes_sent,'
        '"request_time":$request_time,'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_status":"$upstream_status",'
        '"upstream_response_time":"$upstream_response_time",'
        '"pool":"$upstream_http_x_app_pool",'
        '"release":"$upstream_http_x_release_id"'
        '}';

    # Write logs to shared volume
    access_log /var/log/nginx/access.log detailed_upstream;
    error_log /var/log/nginx/error.log warn;

    # Upstream configuration for blue/green deployment
    upstream backend {
    server app_blue:3000 max_fails=1 fail_timeout=5s;
    server app_green:3000 backup;
    }
    server {
        listen 80;
        
        # Tight timeouts for fast failure detection
        proxy_connect_timeout 2s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;
        
        location / {
            proxy_pass http://backend;
            
            # Retry on errors, timeouts, and 5xx responses
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            
            # Forward client headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # CRITICAL: Pass through upstream headers
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
            
            # Don't buffer for faster failover
            proxy_buffering off;
        }
    }
}